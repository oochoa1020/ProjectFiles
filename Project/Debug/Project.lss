
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000a8e  00000b22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a2  0080012c  0080012c  00000b4e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e23  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000904  00000000  00000000  00001a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000928  00000000  00000000  0000234f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00002c78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f4  00000000  00000000  00002da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f0  00000000  00000000  00003398  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003688  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	50 c0       	rjmp	.+160    	; 0xa2 <__ctors_end>
   2:	00 00       	nop
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	00 00       	nop
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	00 00       	nop
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	00 00       	nop
  10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
  12:	00 00       	nop
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	00 00       	nop
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	00 00       	nop
  24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
  26:	00 00       	nop
  28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
  2e:	00 00       	nop
  30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
  3e:	00 00       	nop
  40:	4d c0       	rjmp	.+154    	; 0xdc <__bad_interrupt>
  42:	00 00       	nop
  44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
  46:	00 00       	nop
  48:	49 c0       	rjmp	.+146    	; 0xdc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
  4e:	00 00       	nop
  50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
  52:	00 00       	nop
  54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
  56:	00 00       	nop
  58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
  5e:	00 00       	nop
  60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
  66:	00 00       	nop
  68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
  6e:	00 00       	nop
  70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
  72:	00 00       	nop
  74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
  76:	00 00       	nop
  78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
  7e:	00 00       	nop
  80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
  82:	00 00       	nop
  84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
  86:	00 00       	nop
  88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	e7 02       	muls	r30, r23
  8e:	1c 03       	fmul	r17, r20
  90:	4e 03       	fmul	r20, r22
  92:	28 04       	cpc	r2, r8
  94:	34 04       	cpc	r3, r4
  96:	40 04       	cpc	r4, r0
  98:	4c 04       	cpc	r4, r12
  9a:	58 04       	cpc	r5, r8
  9c:	64 04       	cpc	r6, r4
  9e:	70 04       	cpc	r7, r0
  a0:	7c 04       	cpc	r7, r12

000000a2 <__ctors_end>:
  a2:	11 24       	eor	r1, r1
  a4:	1f be       	out	0x3f, r1	; 63
  a6:	cf ef       	ldi	r28, 0xFF	; 255
  a8:	d0 e4       	ldi	r29, 0x40	; 64
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	ee e8       	ldi	r30, 0x8E	; 142
  b6:	fa e0       	ldi	r31, 0x0A	; 10
  b8:	00 e0       	ldi	r16, 0x00	; 0
  ba:	0b bf       	out	0x3b, r16	; 59
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x14>
  be:	07 90       	elpm	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	ac 32       	cpi	r26, 0x2C	; 44
  c4:	b1 07       	cpc	r27, r17
  c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0x10>

000000c8 <__do_clear_bss>:
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	ac e2       	ldi	r26, 0x2C	; 44
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	ae 3c       	cpi	r26, 0xCE	; 206
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
  d8:	8e d4       	rcall	.+2332   	; 0x9f6 <main>
  da:	d7 c4       	rjmp	.+2478   	; 0xa8a <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <ADC_init>:
void TimerOff() {
	TCCR1B = 0x00;
}

void TimerISR() {
	TimerFlag = 1;
  de:	ea e7       	ldi	r30, 0x7A	; 122
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 6e       	ori	r24, 0xE0	; 224
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 112:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 116:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 11a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
 11e:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 122:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <__data_end+0x2>
 126:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <__data_end+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
}

ISR(TIMER1_COMPA_vect) {
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 144:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 148:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <__data_end+0x1>
 14c:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <__data_end+0x2>
 150:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <__data_end+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
 15e:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 162:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <__data_end+0x2>
 166:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) {
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
void TimerOff() {
	TCCR1B = 0x00;
}

void TimerISR() {
	TimerFlag = 1;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <TimerFlag>

ISR(TIMER1_COMPA_vect) {
	_avr_timer_cntcurr--;
	if (_avr_timer_cntcurr == 0) {
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 180:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 184:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 188:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
 18c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 190:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <__data_end+0x2>
 194:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <__data_end+0x3>
	}
}
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <TimerSet>:

void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 1aa:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ae:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1b6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 1ba:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <__data_end>
 1be:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <__data_end+0x1>
 1c2:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end+0x2>
 1c6:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x3>
 1ca:	08 95       	ret

000001cc <joystick>:
enum sticks{noStick, readStick}stick;
enum games{wait, start, check, winner}game;
enum screens {init1, init2,updateBoard,playing1,playing2,playing3,playing4,playing5,playing6,playing7, done} screen;

void joystick() {
	switch(stick) {
 1cc:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <stick>
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <joystick+0xa>
 1d4:	b3 c0       	rjmp	.+358    	; 0x33c <joystick+0x170>
		{
			break;
		}
		case readStick:
		{
			++joyTime;
 1d6:	40 91 39 01 	lds	r20, 0x0139	; 0x800139 <joyTime>
 1da:	50 91 3a 01 	lds	r21, 0x013A	; 0x80013a <joyTime+0x1>
 1de:	4f 5f       	subi	r20, 0xFF	; 255
 1e0:	5f 4f       	sbci	r21, 0xFF	; 255
 1e2:	50 93 3a 01 	sts	0x013A, r21	; 0x80013a <joyTime+0x1>
 1e6:	40 93 39 01 	sts	0x0139, r20	; 0x800139 <joyTime>
			if (joyTime % 5 == 0) {
 1ea:	9a 01       	movw	r18, r20
 1ec:	ad ec       	ldi	r26, 0xCD	; 205
 1ee:	bc ec       	ldi	r27, 0xCC	; 204
 1f0:	3d d4       	rcall	.+2170   	; 0xa6c <__umulhisi3>
 1f2:	96 95       	lsr	r25
 1f4:	87 95       	ror	r24
 1f6:	96 95       	lsr	r25
 1f8:	87 95       	ror	r24
 1fa:	9c 01       	movw	r18, r24
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	22 0f       	add	r18, r18
 202:	33 1f       	adc	r19, r19
 204:	82 0f       	add	r24, r18
 206:	93 1f       	adc	r25, r19
 208:	48 17       	cp	r20, r24
 20a:	59 07       	cpc	r21, r25
 20c:	49 f4       	brne	.+18     	; 0x220 <joystick+0x54>
				++joyMod;
 20e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <joyMod>
 212:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <joyMod+0x1>
 216:	01 96       	adiw	r24, 0x01	; 1
 218:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <joyMod+0x1>
 21c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <joyMod>
			}
			if (joyMod > 100) {
 220:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <joyMod>
 224:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <joyMod+0x1>
 228:	85 36       	cpi	r24, 0x65	; 101
 22a:	91 05       	cpc	r25, r1
 22c:	08 f4       	brcc	.+2      	; 0x230 <joystick+0x64>
 22e:	86 c0       	rjmp	.+268    	; 0x33c <joystick+0x170>
				joyTime = 0;
 230:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <joyTime+0x1>
 234:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <joyTime>
				joyMod = 0;
 238:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <joyMod+0x1>
 23c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <joyMod>
				joy = ADC;
 240:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 244:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 248:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <joy+0x1>
 24c:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <joy>
				my_short = joy;
 250:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <my_short+0x1>
 254:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <my_short>
				my_char = (char)(my_short); // my_char = 0xAB
 258:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <my_char>
				if (joytest == 0) {
 25c:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <joytest>
 260:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <joytest+0x1>
 264:	23 2b       	or	r18, r19
 266:	49 f4       	brne	.+18     	; 0x27a <joystick+0xae>
					my_sol = my_char;
 268:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <my_sol>
					joytest++;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <joytest+0x1>
 274:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <joytest>
 278:	04 c0       	rjmp	.+8      	; 0x282 <joystick+0xb6>
				}
				if (my_char == my_sol) {
 27a:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <my_sol>
 27e:	82 13       	cpse	r24, r18
 280:	04 c0       	rjmp	.+8      	; 0x28a <joystick+0xbe>
					direction = 'c';
 282:	83 e6       	ldi	r24, 0x63	; 99
 284:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <direction>
 288:	08 95       	ret
				}
				else if ((my_char > (my_sol + 20)) &&  (my_char < (my_sol + 50) )){
 28a:	99 27       	eor	r25, r25
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	a9 01       	movw	r20, r18
 290:	4c 5e       	subi	r20, 0xEC	; 236
 292:	5f 4f       	sbci	r21, 0xFF	; 255
 294:	48 17       	cp	r20, r24
 296:	59 07       	cpc	r21, r25
 298:	24 f5       	brge	.+72     	; 0x2e2 <joystick+0x116>
 29a:	42 5e       	subi	r20, 0xE2	; 226
 29c:	5f 4f       	sbci	r21, 0xFF	; 255
 29e:	84 17       	cp	r24, r20
 2a0:	95 07       	cpc	r25, r21
 2a2:	fc f4       	brge	.+62     	; 0x2e2 <joystick+0x116>
					if (curPick == 0) {
 2a4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <curPick>
 2a8:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <curPick+0x1>
 2ac:	00 97       	sbiw	r24, 0x00	; 0
 2ae:	09 f4       	brne	.+2      	; 0x2b2 <joystick+0xe6>
 2b0:	45 c0       	rjmp	.+138    	; 0x33c <joystick+0x170>
						board[0][curPick] = board[0][curPick];
					}
					else {
						//board[0][curPick] = 0;
						//curPick = curPick - 1;
						board[0][curPick-1] = board[0][curPick];
 2b2:	9c 01       	movw	r18, r24
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	31 09       	sbc	r19, r1
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	fc 01       	movw	r30, r24
 2be:	e9 5b       	subi	r30, 0xB9	; 185
 2c0:	fe 4f       	sbci	r31, 0xFE	; 254
 2c2:	80 81       	ld	r24, Z
 2c4:	91 81       	ldd	r25, Z+1	; 0x01
 2c6:	d9 01       	movw	r26, r18
 2c8:	aa 0f       	add	r26, r26
 2ca:	bb 1f       	adc	r27, r27
 2cc:	a9 5b       	subi	r26, 0xB9	; 185
 2ce:	be 4f       	sbci	r27, 0xFE	; 254
 2d0:	8d 93       	st	X+, r24
 2d2:	9c 93       	st	X, r25
						board[0][curPick] = 0;
 2d4:	11 82       	std	Z+1, r1	; 0x01
 2d6:	10 82       	st	Z, r1
						curPick = curPick - 1;
 2d8:	30 93 36 01 	sts	0x0136, r19	; 0x800136 <curPick+0x1>
 2dc:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <curPick>
 2e0:	08 95       	ret
					}
					//board[0][curPick] = 1;
				}
				else if ((my_char > (my_sol + 190)) &&  (my_char < (my_sol + 200) )){
 2e2:	a9 01       	movw	r20, r18
 2e4:	42 54       	subi	r20, 0x42	; 66
 2e6:	5f 4f       	sbci	r21, 0xFF	; 255
 2e8:	48 17       	cp	r20, r24
 2ea:	59 07       	cpc	r21, r25
 2ec:	24 f5       	brge	.+72     	; 0x336 <joystick+0x16a>
 2ee:	28 53       	subi	r18, 0x38	; 56
 2f0:	3f 4f       	sbci	r19, 0xFF	; 255
 2f2:	82 17       	cp	r24, r18
 2f4:	93 07       	cpc	r25, r19
 2f6:	fc f4       	brge	.+62     	; 0x336 <joystick+0x16a>
					if (curPick == 6) {
 2f8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <curPick>
 2fc:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <curPick+0x1>
 300:	86 30       	cpi	r24, 0x06	; 6
 302:	91 05       	cpc	r25, r1
 304:	d9 f0       	breq	.+54     	; 0x33c <joystick+0x170>
					}
					else {
						//board[0][curPick] = 0;
						//curPick = curPick + 1;}
						//board[0][curPick] = 1;
						board[0][curPick+1] = board[0][curPick];
 306:	9c 01       	movw	r18, r24
 308:	2f 5f       	subi	r18, 0xFF	; 255
 30a:	3f 4f       	sbci	r19, 0xFF	; 255
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	fc 01       	movw	r30, r24
 312:	e9 5b       	subi	r30, 0xB9	; 185
 314:	fe 4f       	sbci	r31, 0xFE	; 254
 316:	80 81       	ld	r24, Z
 318:	91 81       	ldd	r25, Z+1	; 0x01
 31a:	d9 01       	movw	r26, r18
 31c:	aa 0f       	add	r26, r26
 31e:	bb 1f       	adc	r27, r27
 320:	a9 5b       	subi	r26, 0xB9	; 185
 322:	be 4f       	sbci	r27, 0xFE	; 254
 324:	8d 93       	st	X+, r24
 326:	9c 93       	st	X, r25
						board[0][curPick] = 0;
 328:	11 82       	std	Z+1, r1	; 0x01
 32a:	10 82       	st	Z, r1
						curPick = curPick + 1;
 32c:	30 93 36 01 	sts	0x0136, r19	; 0x800136 <curPick+0x1>
 330:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <curPick>
 334:	08 95       	ret
				}
				}
				else {
					direction = 'c';
 336:	83 e6       	ldi	r24, 0x63	; 99
 338:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <direction>
 33c:	08 95       	ret

0000033e <play>:
		}
		
	}
}

void play() {
 33e:	ff 92       	push	r15
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
	switch(game) {
 348:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <game>
 34c:	82 30       	cpi	r24, 0x02	; 2
 34e:	b9 f0       	breq	.+46     	; 0x37e <play+0x40>
 350:	83 30       	cpi	r24, 0x03	; 3
 352:	21 f0       	breq	.+8      	; 0x35c <play+0x1e>
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	09 f0       	breq	.+2      	; 0x35a <play+0x1c>
 358:	1c c1       	rjmp	.+568    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 35a:	20 c0       	rjmp	.+64     	; 0x39c <play+0x5e>
		}
		case winner:
		{
			for (unsigned int q = 7; q >= 1; --q){
				for (unsigned int j = 0; j <=7; ++j){
					if (board[q][j] == winCheck){
 35c:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <winCheck>
 360:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <winCheck+0x1>
 364:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <horizWon>
 368:	00 91 43 01 	lds	r16, 0x0143	; 0x800143 <haveWon>
 36c:	10 91 44 01 	lds	r17, 0x0144	; 0x800144 <haveWon+0x1>
 370:	c7 eb       	ldi	r28, 0xB7	; 183
 372:	d1 e0       	ldi	r29, 0x01	; 1
 374:	67 e4       	ldi	r22, 0x47	; 71
 376:	71 e0       	ldi	r23, 0x01	; 1
						++horizWon;
						if (horizWon >= 4) {
							haveWon = winCheck;
 378:	f2 2e       	mov	r15, r18
 37a:	53 2f       	mov	r21, r19
 37c:	c7 c0       	rjmp	.+398    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
			break;
		}
		case check:
		{
			for (unsigned int j = 7; j >=1; --j){
				if (board[j][choice] == 0) {
 37e:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <choice>
 382:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <choice+0x1>
 386:	f9 01       	movw	r30, r18
 388:	ee 0f       	add	r30, r30
 38a:	ff 1f       	adc	r31, r31
 38c:	e9 54       	subi	r30, 0x49	; 73
 38e:	fe 4f       	sbci	r31, 0xFE	; 254
 390:	80 81       	ld	r24, Z
 392:	91 81       	ldd	r25, Z+1	; 0x01
 394:	89 2b       	or	r24, r25
 396:	09 f0       	breq	.+2      	; 0x39a <play+0x5c>
 398:	44 c0       	rjmp	.+136    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 39a:	50 c0       	rjmp	.+160    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		{
			break;
		}
		case start:
		{
			++startVal;
 39c:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <startVal>
 3a0:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <startVal+0x1>
 3a4:	4f 5f       	subi	r20, 0xFF	; 255
 3a6:	5f 4f       	sbci	r21, 0xFF	; 255
 3a8:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <startVal+0x1>
 3ac:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <startVal>
			if (startVal % 5 == 0) {
 3b0:	9a 01       	movw	r18, r20
 3b2:	ad ec       	ldi	r26, 0xCD	; 205
 3b4:	bc ec       	ldi	r27, 0xCC	; 204
 3b6:	5a d3       	rcall	.+1716   	; 0xa6c <__umulhisi3>
 3b8:	96 95       	lsr	r25
 3ba:	87 95       	ror	r24
 3bc:	96 95       	lsr	r25
 3be:	87 95       	ror	r24
 3c0:	9c 01       	movw	r18, r24
 3c2:	22 0f       	add	r18, r18
 3c4:	33 1f       	adc	r19, r19
 3c6:	22 0f       	add	r18, r18
 3c8:	33 1f       	adc	r19, r19
 3ca:	82 0f       	add	r24, r18
 3cc:	93 1f       	adc	r25, r19
 3ce:	48 17       	cp	r20, r24
 3d0:	59 07       	cpc	r21, r25
 3d2:	49 f4       	brne	.+18     	; 0x3e6 <play+0xa8>
				++startMod;
 3d4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <startMod>
 3d8:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <startMod+0x1>
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <startMod+0x1>
 3e2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <startMod>
			}
			if (startMod > 100) {
 3e6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <startMod>
 3ea:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <startMod+0x1>
 3ee:	85 36       	cpi	r24, 0x65	; 101
 3f0:	91 05       	cpc	r25, r1
 3f2:	08 f4       	brcc	.+2      	; 0x3f6 <play+0xb8>
 3f4:	ce c0       	rjmp	.+412    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
				startMod = 0;
 3f6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <startMod+0x1>
 3fa:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <startMod>
				startVal = 0;
 3fe:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <startVal+0x1>
 402:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <startVal>
				if ((~PINA & 0x04) == 0x04){
 406:	02 99       	sbic	0x00, 2	; 0
 408:	c4 c0       	rjmp	.+392    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
					game = check;
 40a:	82 e0       	ldi	r24, 0x02	; 2
 40c:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <game>
					choice = curPick;
 410:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <curPick>
 414:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <curPick+0x1>
 418:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <choice+0x1>
 41c:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <choice>
 420:	b8 c0       	rjmp	.+368    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 422:	f9 01       	movw	r30, r18
 424:	ee 0f       	add	r30, r30
 426:	ff 1f       	adc	r31, r31
 428:	e9 55       	subi	r30, 0x59	; 89
 42a:	fe 4f       	sbci	r31, 0xFE	; 254
				
			break;
		}
		case check:
		{
			for (unsigned int j = 7; j >=1; --j){
 42c:	86 e0       	ldi	r24, 0x06	; 6
 42e:	90 e0       	ldi	r25, 0x00	; 0
				if (board[j][choice] == 0) {
 430:	40 81       	ld	r20, Z
 432:	51 81       	ldd	r21, Z+1	; 0x01
 434:	45 2b       	or	r20, r21
 436:	09 f0       	breq	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 438:	4d c0       	rjmp	.+154    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43c:	87 e0       	ldi	r24, 0x07	; 7
 43e:	90 e0       	ldi	r25, 0x00	; 0
					if (player == 'g') {
 440:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <player>
 444:	47 36       	cpi	r20, 0x67	; 103
 446:	11 f5       	brne	.+68     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
						board[j][choice] = 1;
 448:	fc 01       	movw	r30, r24
 44a:	ee 0f       	add	r30, r30
 44c:	ff 1f       	adc	r31, r31
 44e:	ee 0f       	add	r30, r30
 450:	ff 1f       	adc	r31, r31
 452:	ee 0f       	add	r30, r30
 454:	ff 1f       	adc	r31, r31
 456:	e2 0f       	add	r30, r18
 458:	f3 1f       	adc	r31, r19
 45a:	ee 0f       	add	r30, r30
 45c:	ff 1f       	adc	r31, r31
 45e:	e9 5b       	subi	r30, 0xB9	; 185
 460:	fe 4f       	sbci	r31, 0xFE	; 254
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	91 83       	std	Z+1, r25	; 0x01
 468:	80 83       	st	Z, r24
						player = 'r';
 46a:	42 e7       	ldi	r20, 0x72	; 114
 46c:	40 93 07 01 	sts	0x0107, r20	; 0x800107 <player>
						winCheck = 1;
 470:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <winCheck+0x1>
 474:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <winCheck>
						board[0][choice] = 2;
 478:	22 0f       	add	r18, r18
 47a:	33 1f       	adc	r19, r19
 47c:	f9 01       	movw	r30, r18
 47e:	e9 5b       	subi	r30, 0xB9	; 185
 480:	fe 4f       	sbci	r31, 0xFE	; 254
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	91 83       	std	Z+1, r25	; 0x01
 488:	80 83       	st	Z, r24
 48a:	29 c0       	rjmp	.+82     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
					}
					else if (player == 'r') {
 48c:	42 37       	cpi	r20, 0x72	; 114
 48e:	39 f5       	brne	.+78     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
						board[j][choice] = 2;
 490:	fc 01       	movw	r30, r24
 492:	ee 0f       	add	r30, r30
 494:	ff 1f       	adc	r31, r31
 496:	ee 0f       	add	r30, r30
 498:	ff 1f       	adc	r31, r31
 49a:	ee 0f       	add	r30, r30
 49c:	ff 1f       	adc	r31, r31
 49e:	e2 0f       	add	r30, r18
 4a0:	f3 1f       	adc	r31, r19
 4a2:	ee 0f       	add	r30, r30
 4a4:	ff 1f       	adc	r31, r31
 4a6:	e9 5b       	subi	r30, 0xB9	; 185
 4a8:	fe 4f       	sbci	r31, 0xFE	; 254
 4aa:	82 e0       	ldi	r24, 0x02	; 2
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	91 83       	std	Z+1, r25	; 0x01
 4b0:	80 83       	st	Z, r24
						player = 'g';
 4b2:	47 e6       	ldi	r20, 0x67	; 103
 4b4:	40 93 07 01 	sts	0x0107, r20	; 0x800107 <player>
						winCheck = 2;
 4b8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <winCheck+0x1>
 4bc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <winCheck>
						board[0][choice] = 1;
 4c0:	22 0f       	add	r18, r18
 4c2:	33 1f       	adc	r19, r19
 4c4:	f9 01       	movw	r30, r18
 4c6:	e9 5b       	subi	r30, 0xB9	; 185
 4c8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	91 83       	std	Z+1, r25	; 0x01
 4d0:	80 83       	st	Z, r24
					}
					game = winner;
					break;
 4d2:	05 c0       	rjmp	.+10     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
				
			break;
		}
		case check:
		{
			for (unsigned int j = 7; j >=1; --j){
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	70 97       	sbiw	r30, 0x10	; 16
 4d8:	00 97       	sbiw	r24, 0x00	; 0
 4da:	09 f0       	breq	.+2      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4dc:	a9 cf       	rjmp	.-174    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
					}
					game = winner;
					break;
				}
			}
			game = winner;
 4de:	83 e0       	ldi	r24, 0x03	; 3
 4e0:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <game>
			break;
 4e4:	56 c0       	rjmp	.+172    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
		}
		case winner:
		{
			for (unsigned int q = 7; q >= 1; --q){
				for (unsigned int j = 0; j <=7; ++j){
					if (board[q][j] == winCheck){
 4e6:	81 91       	ld	r24, Z+
 4e8:	91 91       	ld	r25, Z+
 4ea:	82 17       	cp	r24, r18
 4ec:	93 07       	cpc	r25, r19
 4ee:	31 f4       	brne	.+12     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
						++horizWon;
 4f0:	4f 5f       	subi	r20, 0xFF	; 255
						if (horizWon >= 4) {
 4f2:	44 30       	cpi	r20, 0x04	; 4
 4f4:	20 f0       	brcs	.+8      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
							haveWon = winCheck;
 4f6:	0f 2d       	mov	r16, r15
 4f8:	15 2f       	mov	r17, r21
 4fa:	01 c0       	rjmp	.+2      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
						}
					}
					else {
						horizWon = 0;
 4fc:	40 e0       	ldi	r20, 0x00	; 0
			break;
		}
		case winner:
		{
			for (unsigned int q = 7; q >= 1; --q){
				for (unsigned int j = 0; j <=7; ++j){
 4fe:	ea 17       	cp	r30, r26
 500:	fb 07       	cpc	r31, r27
 502:	89 f7       	brne	.-30     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 504:	60 97       	sbiw	r28, 0x10	; 16
			game = winner;
			break;
		}
		case winner:
		{
			for (unsigned int q = 7; q >= 1; --q){
 506:	c6 17       	cp	r28, r22
 508:	d7 07       	cpc	r29, r23
 50a:	21 f0       	breq	.+8      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 50c:	de 01       	movw	r26, r28
 50e:	50 96       	adiw	r26, 0x10	; 16
			break;
		}
		case check:
		{
			for (unsigned int j = 7; j >=1; --j){
				if (board[j][choice] == 0) {
 510:	fe 01       	movw	r30, r28
 512:	e9 cf       	rjmp	.-46     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 514:	10 93 44 01 	sts	0x0144, r17	; 0x800144 <haveWon+0x1>
 518:	00 93 43 01 	sts	0x0143, r16	; 0x800143 <haveWon>
 51c:	40 93 46 01 	sts	0x0146, r20	; 0x800146 <horizWon>
					else {
						horizWon = 0;
					}
				}
			}
			if (haveWon == winCheck) {
 520:	20 17       	cp	r18, r16
 522:	31 07       	cpc	r19, r17
 524:	21 f4       	brne	.+8      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
				screen = done;
 526:	8a e0       	ldi	r24, 0x0A	; 10
 528:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <screen>
				break;
 52c:	32 c0       	rjmp	.+100    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
			}
			horizWon = 0;
 52e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <horizWon>
 532:	40 91 45 01 	lds	r20, 0x0145	; 0x800145 <vertWon>
 536:	50 91 ca 01 	lds	r21, 0x01CA	; 0x8001ca <screen>
 53a:	a7 e5       	ldi	r26, 0x57	; 87
 53c:	b1 e0       	ldi	r27, 0x01	; 1
			for (unsigned int q = 0; q <= 7; ++q){
				for (unsigned int j = 7; j >=1; --j){
					if (board[j][q] == winCheck){
						++vertWon;
						if (vertWon >= 4) {
							haveWon = winCheck;
 53e:	f2 2e       	mov	r15, r18
 540:	d3 2f       	mov	r29, r19
							screen = done;
 542:	ca e0       	ldi	r28, 0x0A	; 10
 544:	17 c0       	rjmp	.+46     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
				break;
			}
			horizWon = 0;
			for (unsigned int q = 0; q <= 7; ++q){
				for (unsigned int j = 7; j >=1; --j){
					if (board[j][q] == winCheck){
 546:	80 81       	ld	r24, Z
 548:	91 81       	ldd	r25, Z+1	; 0x01
 54a:	28 17       	cp	r18, r24
 54c:	39 07       	cpc	r19, r25
 54e:	21 f4       	brne	.+8      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
						++vertWon;
 550:	4f 5f       	subi	r20, 0xFF	; 255
						if (vertWon >= 4) {
 552:	44 30       	cpi	r20, 0x04	; 4
 554:	10 f0       	brcs	.+4      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 556:	06 c0       	rjmp	.+12     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
							screen = done;
							break;
						}
					}
					else {
						vertWon = 0;
 558:	40 e0       	ldi	r20, 0x00	; 0
 55a:	70 97       	sbiw	r30, 0x10	; 16
				screen = done;
				break;
			}
			horizWon = 0;
			for (unsigned int q = 0; q <= 7; ++q){
				for (unsigned int j = 7; j >=1; --j){
 55c:	e6 17       	cp	r30, r22
 55e:	f7 07       	cpc	r31, r23
 560:	91 f7       	brne	.-28     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 562:	03 c0       	rjmp	.+6      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
					if (board[j][q] == winCheck){
						++vertWon;
						if (vertWon >= 4) {
							haveWon = winCheck;
 564:	0f 2d       	mov	r16, r15
 566:	1d 2f       	mov	r17, r29
							screen = done;
 568:	5c 2f       	mov	r21, r28
 56a:	6e 5f       	subi	r22, 0xFE	; 254
 56c:	7f 4f       	sbci	r23, 0xFF	; 255
			if (haveWon == winCheck) {
				screen = done;
				break;
			}
			horizWon = 0;
			for (unsigned int q = 0; q <= 7; ++q){
 56e:	6a 17       	cp	r22, r26
 570:	7b 07       	cpc	r23, r27
 572:	21 f0       	breq	.+8      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 574:	fb 01       	movw	r30, r22
 576:	e0 59       	subi	r30, 0x90	; 144
 578:	ff 4f       	sbci	r31, 0xFF	; 255
 57a:	e5 cf       	rjmp	.-54     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 57c:	10 93 44 01 	sts	0x0144, r17	; 0x800144 <haveWon+0x1>
 580:	00 93 43 01 	sts	0x0143, r16	; 0x800143 <haveWon>
 584:	50 93 ca 01 	sts	0x01CA, r21	; 0x8001ca <screen>
					else {
						vertWon = 0;
					}
				}
			}
			vertWon = 0;
 588:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <vertWon>
			game = start;
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <game>
			break;
		}
	}
};
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	1f 91       	pop	r17
 598:	0f 91       	pop	r16
 59a:	ff 90       	pop	r15
 59c:	08 95       	ret

0000059e <display>:

void display() {
 59e:	8f 92       	push	r8
 5a0:	9f 92       	push	r9
 5a2:	af 92       	push	r10
 5a4:	bf 92       	push	r11
 5a6:	cf 92       	push	r12
 5a8:	df 92       	push	r13
 5aa:	ef 92       	push	r14
 5ac:	ff 92       	push	r15
 5ae:	0f 93       	push	r16
 5b0:	1f 93       	push	r17
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
	switch(screen) {
 5b6:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <screen>
 5ba:	8e 2f       	mov	r24, r30
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	8b 30       	cpi	r24, 0x0B	; 11
 5c0:	91 05       	cpc	r25, r1
 5c2:	08 f0       	brcs	.+2      	; 0x5c6 <display+0x28>
 5c4:	09 c2       	rjmp	.+1042   	; 0x9d8 <display+0x43a>
 5c6:	fc 01       	movw	r30, r24
 5c8:	ea 5b       	subi	r30, 0xBA	; 186
 5ca:	ff 4f       	sbci	r31, 0xFF	; 255
 5cc:	46 c2       	rjmp	.+1164   	; 0xa5a <__tablejump2__>
		
		case init1:
		{	
			++load;
 5ce:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <load>
 5d2:	8f 5f       	subi	r24, 0xFF	; 255
 5d4:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <load>
			PORTC = 0b11111111;
 5d8:	8f ef       	ldi	r24, 0xFF	; 255
 5da:	88 b9       	out	0x08, r24	; 8
			PORTB = 0b00111100;
 5dc:	8c e3       	ldi	r24, 0x3C	; 60
 5de:	85 b9       	out	0x05, r24	; 5
			PORTD = 0b11000011;
 5e0:	83 ec       	ldi	r24, 0xC3	; 195
 5e2:	8b b9       	out	0x0b, r24	; 11
			if (load % 5 == 0) {
 5e4:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <load>
 5e8:	8d ec       	ldi	r24, 0xCD	; 205
 5ea:	98 9f       	mul	r25, r24
 5ec:	81 2d       	mov	r24, r1
 5ee:	11 24       	eor	r1, r1
 5f0:	86 95       	lsr	r24
 5f2:	86 95       	lsr	r24
 5f4:	28 2f       	mov	r18, r24
 5f6:	22 0f       	add	r18, r18
 5f8:	22 0f       	add	r18, r18
 5fa:	82 0f       	add	r24, r18
 5fc:	98 13       	cpse	r25, r24
 5fe:	05 c0       	rjmp	.+10     	; 0x60a <display+0x6c>
				++rock;
 600:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <rock>
 604:	8f 5f       	subi	r24, 0xFF	; 255
 606:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <rock>
			}
			if (rock > 100) {
 60a:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <rock>
 60e:	85 36       	cpi	r24, 0x65	; 101
 610:	08 f4       	brcc	.+2      	; 0x614 <display+0x76>
 612:	e4 c1       	rjmp	.+968    	; 0x9dc <display+0x43e>
				rock = 0;
 614:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <rock>
				load = 0;
 618:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <load>
				screen = init2;
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <screen>
				if ((~PINA & 0x04) == 0x04){
 622:	02 99       	sbic	0x00, 2	; 0
 624:	db c1       	rjmp	.+950    	; 0x9dc <display+0x43e>
					screen = updateBoard;
 626:	82 e0       	ldi	r24, 0x02	; 2
 628:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <screen>
					game = start;
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <game>
					stick = readStick;
 632:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <stick>
 636:	d2 c1       	rjmp	.+932    	; 0x9dc <display+0x43e>
			}*/
			break;
		}
		case init2:
		{
			++load;
 638:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <load>
 63c:	8f 5f       	subi	r24, 0xFF	; 255
 63e:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <load>
			PORTC = 0b11111111;
 642:	8f ef       	ldi	r24, 0xFF	; 255
 644:	88 b9       	out	0x08, r24	; 8
			PORTB = 0b00000000;
 646:	15 b8       	out	0x05, r1	; 5
			PORTD = 0b11111111;
 648:	8b b9       	out	0x0b, r24	; 11
			if (load % 5 == 0) {
 64a:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <load>
 64e:	8d ec       	ldi	r24, 0xCD	; 205
 650:	98 9f       	mul	r25, r24
 652:	81 2d       	mov	r24, r1
 654:	11 24       	eor	r1, r1
 656:	86 95       	lsr	r24
 658:	86 95       	lsr	r24
 65a:	28 2f       	mov	r18, r24
 65c:	22 0f       	add	r18, r18
 65e:	22 0f       	add	r18, r18
 660:	82 0f       	add	r24, r18
 662:	98 13       	cpse	r25, r24
 664:	05 c0       	rjmp	.+10     	; 0x670 <display+0xd2>
				++rock;
 666:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <rock>
 66a:	8f 5f       	subi	r24, 0xFF	; 255
 66c:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <rock>
			}
			if (rock > 100) {
 670:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <rock>
 674:	85 36       	cpi	r24, 0x65	; 101
 676:	08 f4       	brcc	.+2      	; 0x67a <display+0xdc>
 678:	b1 c1       	rjmp	.+866    	; 0x9dc <display+0x43e>
				load = 0;
 67a:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <load>
				rock = 0;
 67e:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <rock>
				screen = init1;
 682:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <screen>
				if ((~PINA & 0x04) == 0x04){
 686:	02 99       	sbic	0x00, 2	; 0
 688:	a9 c1       	rjmp	.+850    	; 0x9dc <display+0x43e>
					screen = updateBoard;
 68a:	82 e0       	ldi	r24, 0x02	; 2
 68c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <screen>
					game = start;
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <game>
					stick = readStick;
 696:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <stick>
 69a:	a0 c1       	rjmp	.+832    	; 0x9dc <display+0x43e>
			}*/
			break;
		}
		
		case updateBoard:{
			load++;
 69c:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <load>
 6a0:	9f 5f       	subi	r25, 0xFF	; 255
 6a2:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <load>
			if (load % 5 == 0) {
 6a6:	8d ec       	ldi	r24, 0xCD	; 205
 6a8:	98 9f       	mul	r25, r24
 6aa:	81 2d       	mov	r24, r1
 6ac:	11 24       	eor	r1, r1
 6ae:	86 95       	lsr	r24
 6b0:	86 95       	lsr	r24
 6b2:	28 2f       	mov	r18, r24
 6b4:	22 0f       	add	r18, r18
 6b6:	22 0f       	add	r18, r18
 6b8:	82 0f       	add	r24, r18
 6ba:	98 13       	cpse	r25, r24
 6bc:	05 c0       	rjmp	.+10     	; 0x6c8 <display+0x12a>
				++rock;
 6be:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <rock>
 6c2:	8f 5f       	subi	r24, 0xFF	; 255
 6c4:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <rock>
			}
			if (rock > 100) {
 6c8:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <rock>
 6cc:	85 36       	cpi	r24, 0x65	; 101
 6ce:	08 f4       	brcc	.+2      	; 0x6d2 <display+0x134>
 6d0:	44 c0       	rjmp	.+136    	; 0x75a <display+0x1bc>
				rock = 0;
 6d2:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <rock>
				load = 0;
 6d6:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <load>
				if ((~PINA & 0x08) == 0x08){
 6da:	03 99       	sbic	0x00, 3	; 0
 6dc:	7f c1       	rjmp	.+766    	; 0x9dc <display+0x43e>
					stick = readStick;
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <stick>
 6e4:	27 eb       	ldi	r18, 0xB7	; 183
 6e6:	31 e0       	ldi	r19, 0x01	; 1
 6e8:	47 e4       	ldi	r20, 0x47	; 71
 6ea:	51 e0       	ldi	r21, 0x01	; 1
 6ec:	0a c0       	rjmp	.+20     	; 0x702 <display+0x164>
					for (unsigned int q = 7; q >= 1; --q){
						for (unsigned int j = 0; j <=7; ++j){
							board[q][j] = 0;
 6ee:	11 92       	st	Z+, r1
 6f0:	11 92       	st	Z+, r1
				rock = 0;
				load = 0;
				if ((~PINA & 0x08) == 0x08){
					stick = readStick;
					for (unsigned int q = 7; q >= 1; --q){
						for (unsigned int j = 0; j <=7; ++j){
 6f2:	e8 17       	cp	r30, r24
 6f4:	f9 07       	cpc	r31, r25
 6f6:	d9 f7       	brne	.-10     	; 0x6ee <display+0x150>
 6f8:	20 51       	subi	r18, 0x10	; 16
 6fa:	31 09       	sbc	r19, r1
			if (rock > 100) {
				rock = 0;
				load = 0;
				if ((~PINA & 0x08) == 0x08){
					stick = readStick;
					for (unsigned int q = 7; q >= 1; --q){
 6fc:	42 17       	cp	r20, r18
 6fe:	53 07       	cpc	r21, r19
 700:	21 f0       	breq	.+8      	; 0x70a <display+0x16c>
 702:	c9 01       	movw	r24, r18
 704:	40 96       	adiw	r24, 0x10	; 16
			break;
		}
	}
};

void display() {
 706:	f9 01       	movw	r30, r18
 708:	f2 cf       	rjmp	.-28     	; 0x6ee <display+0x150>
					for (unsigned int q = 7; q >= 1; --q){
						for (unsigned int j = 0; j <=7; ++j){
							board[q][j] = 0;
						}
					}
					board[0][choice] = 0;
 70a:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <choice>
 70e:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <choice+0x1>
 712:	ee 0f       	add	r30, r30
 714:	ff 1f       	adc	r31, r31
 716:	e9 5b       	subi	r30, 0xB9	; 185
 718:	fe 4f       	sbci	r31, 0xFE	; 254
 71a:	11 82       	std	Z+1, r1	; 0x01
 71c:	10 82       	st	Z, r1
					curPick = 0;
 71e:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <curPick+0x1>
 722:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <curPick>
					choice = 0;
 726:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <choice+0x1>
 72a:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <choice>
					board[0][0] = 1;
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <board+0x1>
 736:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <board>
					player = 'g';
 73a:	27 e6       	ldi	r18, 0x67	; 103
 73c:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <player>
					winCheck = 1;
 740:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <winCheck+0x1>
 744:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <winCheck>
					haveWon = 0;
 748:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <haveWon+0x1>
 74c:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <haveWon>
					screen = init1;
 750:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <screen>
					game = wait;
 754:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <game>
 758:	41 c1       	rjmp	.+642    	; 0x9dc <display+0x43e>
				break;
			}
			
			
			
			PORTB = 0b00000000;
 75a:	15 b8       	out	0x05, r1	; 5
			PORTD = 0b11111111;
 75c:	8f ef       	ldi	r24, 0xFF	; 255
 75e:	8b b9       	out	0x0b, r24	; 11
			PORTC = 0b11111111;
 760:	88 b9       	out	0x08, r24	; 8
			renderBoard[0] = 0b11111111;
 762:	ee e1       	ldi	r30, 0x1E	; 30
 764:	f1 e0       	ldi	r31, 0x01	; 1
 766:	8f ef       	ldi	r24, 0xFF	; 255
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	91 83       	std	Z+1, r25	; 0x01
 76c:	80 83       	st	Z, r24
			renderBoard[1] = 0b11111111;
 76e:	93 83       	std	Z+3, r25	; 0x03
 770:	82 83       	std	Z+2, r24	; 0x02
			renderBoard[2] = 0b11111111;
 772:	95 83       	std	Z+5, r25	; 0x05
 774:	84 83       	std	Z+4, r24	; 0x04
			renderBoard[3] = 0b11111111;
 776:	97 83       	std	Z+7, r25	; 0x07
 778:	86 83       	std	Z+6, r24	; 0x06
			renderBoard[4] = 0b11111111;
 77a:	91 87       	std	Z+9, r25	; 0x09
 77c:	80 87       	std	Z+8, r24	; 0x08
			renderBoard[5] = 0b11111111;
 77e:	93 87       	std	Z+11, r25	; 0x0b
 780:	82 87       	std	Z+10, r24	; 0x0a
			renderBoard[6] = 0b11111111;
 782:	95 87       	std	Z+13, r25	; 0x0d
 784:	84 87       	std	Z+12, r24	; 0x0c
			renderBoardC[0] = 0b11111111;
 786:	e0 e1       	ldi	r30, 0x10	; 16
 788:	f1 e0       	ldi	r31, 0x01	; 1
 78a:	91 83       	std	Z+1, r25	; 0x01
 78c:	80 83       	st	Z, r24
			renderBoardC[1] = 0b11111111;
 78e:	93 83       	std	Z+3, r25	; 0x03
 790:	82 83       	std	Z+2, r24	; 0x02
			renderBoardC[2] = 0b11111111;
 792:	95 83       	std	Z+5, r25	; 0x05
 794:	84 83       	std	Z+4, r24	; 0x04
			renderBoardC[3] = 0b11111111;
 796:	97 83       	std	Z+7, r25	; 0x07
 798:	86 83       	std	Z+6, r24	; 0x06
			renderBoardC[4] = 0b11111111;
 79a:	91 87       	std	Z+9, r25	; 0x09
 79c:	80 87       	std	Z+8, r24	; 0x08
			renderBoardC[5] = 0b11111111;
 79e:	93 87       	std	Z+11, r25	; 0x0b
 7a0:	82 87       	std	Z+10, r24	; 0x0a
			renderBoardC[6] = 0b11111111;
 7a2:	95 87       	std	Z+13, r25	; 0x0d
 7a4:	84 87       	std	Z+12, r24	; 0x0c
 7a6:	07 e4       	ldi	r16, 0x47	; 71
 7a8:	11 e0       	ldi	r17, 0x01	; 1
 7aa:	ce e1       	ldi	r28, 0x1E	; 30
 7ac:	d1 e0       	ldi	r29, 0x01	; 1
 7ae:	0f 2e       	mov	r0, r31
 7b0:	fc e2       	ldi	r31, 0x2C	; 44
 7b2:	cf 2e       	mov	r12, r31
 7b4:	f1 e0       	ldi	r31, 0x01	; 1
 7b6:	df 2e       	mov	r13, r31
 7b8:	f0 2d       	mov	r31, r0
 7ba:	78 01       	movw	r14, r16
 7bc:	0f 2e       	mov	r0, r31
 7be:	f8 e0       	ldi	r31, 0x08	; 8
 7c0:	af 2e       	mov	r10, r31
 7c2:	f1 e0       	ldi	r31, 0x01	; 1
 7c4:	bf 2e       	mov	r11, r31
 7c6:	f0 2d       	mov	r31, r0
 7c8:	20 e1       	ldi	r18, 0x10	; 16
 7ca:	31 e0       	ldi	r19, 0x01	; 1
 7cc:	1e c0       	rjmp	.+60     	; 0x80a <display+0x26c>
			//renderBoard[0] = PORTD & anded[0];
			//PORTD = renderBoard[7];
			for (unsigned int h = 0; h <=6; ++h) {
				for (unsigned int k = 0; k <= 7; ++k) {
					if(board[k][h] == 1) {
 7ce:	8d 91       	ld	r24, X+
 7d0:	9c 91       	ld	r25, X
 7d2:	11 97       	sbiw	r26, 0x01	; 1
 7d4:	01 97       	sbiw	r24, 0x01	; 1
 7d6:	41 f4       	brne	.+16     	; 0x7e8 <display+0x24a>
						renderBoard[h] = renderBoard[h] & anded[k];
 7d8:	80 81       	ld	r24, Z
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	68 81       	ld	r22, Y
 7de:	79 81       	ldd	r23, Y+1	; 0x01
 7e0:	86 23       	and	r24, r22
 7e2:	97 23       	and	r25, r23
 7e4:	99 83       	std	Y+1, r25	; 0x01
 7e6:	88 83       	st	Y, r24
 7e8:	50 96       	adiw	r26, 0x10	; 16
 7ea:	31 96       	adiw	r30, 0x01	; 1
			renderBoardC[5] = 0b11111111;
			renderBoardC[6] = 0b11111111;
			//renderBoard[0] = PORTD & anded[0];
			//PORTD = renderBoard[7];
			for (unsigned int h = 0; h <=6; ++h) {
				for (unsigned int k = 0; k <= 7; ++k) {
 7ec:	2e 17       	cp	r18, r30
 7ee:	3f 07       	cpc	r19, r31
 7f0:	71 f7       	brne	.-36     	; 0x7ce <display+0x230>
 7f2:	82 e0       	ldi	r24, 0x02	; 2
 7f4:	e8 0e       	add	r14, r24
 7f6:	f1 1c       	adc	r15, r1
 7f8:	22 96       	adiw	r28, 0x02	; 2
			renderBoardC[4] = 0b11111111;
			renderBoardC[5] = 0b11111111;
			renderBoardC[6] = 0b11111111;
			//renderBoard[0] = PORTD & anded[0];
			//PORTD = renderBoard[7];
			for (unsigned int h = 0; h <=6; ++h) {
 7fa:	cc 15       	cp	r28, r12
 7fc:	dd 05       	cpc	r29, r13
 7fe:	29 f4       	brne	.+10     	; 0x80a <display+0x26c>
 800:	c0 e1       	ldi	r28, 0x10	; 16
 802:	d1 e0       	ldi	r29, 0x01	; 1
 804:	2e e1       	ldi	r18, 0x1E	; 30
 806:	31 e0       	ldi	r19, 0x01	; 1
 808:	1f c0       	rjmp	.+62     	; 0x848 <display+0x2aa>
 80a:	9a 2c       	mov	r9, r10
 80c:	8b 2c       	mov	r8, r11
 80e:	a9 01       	movw	r20, r18
			break;
		}
	}
};

void display() {
 810:	e8 e0       	ldi	r30, 0x08	; 8
 812:	f1 e0       	ldi	r31, 0x01	; 1
 814:	d7 01       	movw	r26, r14
 816:	db cf       	rjmp	.-74     	; 0x7ce <display+0x230>
					}
				}
			}
			for (unsigned int h = 0; h <=6; ++h) {
				for (unsigned int k = 0; k <= 7; ++k) {
					if(board[k][h] == 2) {
 818:	8d 91       	ld	r24, X+
 81a:	9c 91       	ld	r25, X
 81c:	11 97       	sbiw	r26, 0x01	; 1
 81e:	02 97       	sbiw	r24, 0x02	; 2
 820:	41 f4       	brne	.+16     	; 0x832 <display+0x294>
						renderBoardC[h] = renderBoardC[h] & anded[k];
 822:	80 81       	ld	r24, Z
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	68 81       	ld	r22, Y
 828:	79 81       	ldd	r23, Y+1	; 0x01
 82a:	86 23       	and	r24, r22
 82c:	97 23       	and	r25, r23
 82e:	99 83       	std	Y+1, r25	; 0x01
 830:	88 83       	st	Y, r24
 832:	50 96       	adiw	r26, 0x10	; 16
 834:	31 96       	adiw	r30, 0x01	; 1
						renderBoard[h] = renderBoard[h] & anded[k];
					}
				}
			}
			for (unsigned int h = 0; h <=6; ++h) {
				for (unsigned int k = 0; k <= 7; ++k) {
 836:	e4 17       	cp	r30, r20
 838:	f5 07       	cpc	r31, r21
 83a:	71 f7       	brne	.-36     	; 0x818 <display+0x27a>
 83c:	0e 5f       	subi	r16, 0xFE	; 254
 83e:	1f 4f       	sbci	r17, 0xFF	; 255
 840:	22 96       	adiw	r28, 0x02	; 2
					if(board[k][h] == 1) {
						renderBoard[h] = renderBoard[h] & anded[k];
					}
				}
			}
			for (unsigned int h = 0; h <=6; ++h) {
 842:	c2 17       	cp	r28, r18
 844:	d3 07       	cpc	r29, r19
 846:	21 f0       	breq	.+8      	; 0x850 <display+0x2b2>
			renderBoardC[1] = 0b11111111;
			renderBoardC[2] = 0b11111111;
			renderBoardC[3] = 0b11111111;
			renderBoardC[4] = 0b11111111;
			renderBoardC[5] = 0b11111111;
			renderBoardC[6] = 0b11111111;
 848:	e9 2d       	mov	r30, r9
 84a:	f8 2d       	mov	r31, r8
 84c:	d8 01       	movw	r26, r16
 84e:	e4 cf       	rjmp	.-56     	; 0x818 <display+0x27a>
		case playing1:
		{
			/*PORTC = 0b11111111;
			PORTB = 0b00000001;
			PORTD = 0b00000000;*/
			PORTB = 0b00000001;
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	85 b9       	out	0x05, r24	; 5
			PORTC = renderBoardC[0];
 854:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <renderBoardC>
 858:	88 b9       	out	0x08, r24	; 8
			PORTD = renderBoard[0];
 85a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <renderBoard>
 85e:	8b b9       	out	0x0b, r24	; 11
			screen = playing2;
 860:	84 e0       	ldi	r24, 0x04	; 4
 862:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <screen>
			break;
 866:	ba c0       	rjmp	.+372    	; 0x9dc <display+0x43e>
		}
		case playing2:
		{
			PORTB = 0b00000010;
 868:	82 e0       	ldi	r24, 0x02	; 2
 86a:	85 b9       	out	0x05, r24	; 5
			PORTC = renderBoardC[1];
 86c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <renderBoardC+0x2>
 870:	88 b9       	out	0x08, r24	; 8
			PORTD = renderBoard[1];
 872:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <renderBoard+0x2>
 876:	8b b9       	out	0x0b, r24	; 11
			screen = playing3;
 878:	85 e0       	ldi	r24, 0x05	; 5
 87a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <screen>
			break;
 87e:	ae c0       	rjmp	.+348    	; 0x9dc <display+0x43e>
		}
		case playing3:
		{
			PORTB = 0b00000100;
 880:	84 e0       	ldi	r24, 0x04	; 4
 882:	85 b9       	out	0x05, r24	; 5
			PORTC = renderBoardC[2];
 884:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <renderBoardC+0x4>
 888:	88 b9       	out	0x08, r24	; 8
			PORTD = renderBoard[2];
 88a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <renderBoard+0x4>
 88e:	8b b9       	out	0x0b, r24	; 11
			screen = playing4;
 890:	86 e0       	ldi	r24, 0x06	; 6
 892:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <screen>
			break;
 896:	a2 c0       	rjmp	.+324    	; 0x9dc <display+0x43e>
		}
		case playing4:
		{
			PORTB = 0b00001000;
 898:	88 e0       	ldi	r24, 0x08	; 8
 89a:	85 b9       	out	0x05, r24	; 5
			PORTC = renderBoardC[3];
 89c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <renderBoardC+0x6>
 8a0:	88 b9       	out	0x08, r24	; 8
			PORTD = renderBoard[3];
 8a2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <renderBoard+0x6>
 8a6:	8b b9       	out	0x0b, r24	; 11
			screen = playing5;
 8a8:	87 e0       	ldi	r24, 0x07	; 7
 8aa:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <screen>
			break;
 8ae:	96 c0       	rjmp	.+300    	; 0x9dc <display+0x43e>
		}
		case playing5:
		{
			PORTB = 0b00010000;
 8b0:	80 e1       	ldi	r24, 0x10	; 16
 8b2:	85 b9       	out	0x05, r24	; 5
			PORTC = renderBoardC[4];
 8b4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <renderBoardC+0x8>
 8b8:	88 b9       	out	0x08, r24	; 8
			PORTD = renderBoard[4];
 8ba:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <renderBoard+0x8>
 8be:	8b b9       	out	0x0b, r24	; 11
			screen = playing6;
 8c0:	88 e0       	ldi	r24, 0x08	; 8
 8c2:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <screen>
			break;
 8c6:	8a c0       	rjmp	.+276    	; 0x9dc <display+0x43e>
		}
		case playing6:
		{
			PORTB = 0b00100000;
 8c8:	80 e2       	ldi	r24, 0x20	; 32
 8ca:	85 b9       	out	0x05, r24	; 5
			PORTC = renderBoardC[5];
 8cc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <renderBoardC+0xa>
 8d0:	88 b9       	out	0x08, r24	; 8
			PORTD = renderBoard[5];
 8d2:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <renderBoard+0xa>
 8d6:	8b b9       	out	0x0b, r24	; 11
			screen = playing7;
 8d8:	89 e0       	ldi	r24, 0x09	; 9
 8da:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <screen>
			break;
 8de:	7e c0       	rjmp	.+252    	; 0x9dc <display+0x43e>
		}
		case playing7:
		{
			PORTB = 0b01000000;
 8e0:	80 e4       	ldi	r24, 0x40	; 64
 8e2:	85 b9       	out	0x05, r24	; 5
			PORTC = renderBoardC[6];
 8e4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <renderBoardC+0xc>
 8e8:	88 b9       	out	0x08, r24	; 8
			PORTD = renderBoard[6];
 8ea:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <renderBoard+0xc>
 8ee:	8b b9       	out	0x0b, r24	; 11
			screen = updateBoard;
 8f0:	82 e0       	ldi	r24, 0x02	; 2
 8f2:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <screen>
			break;
 8f6:	72 c0       	rjmp	.+228    	; 0x9dc <display+0x43e>
		}
		
		case done:
		{
			if (winCheck == 1) {
 8f8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <winCheck>
 8fc:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <winCheck+0x1>
 900:	01 97       	sbiw	r24, 0x01	; 1
 902:	29 f4       	brne	.+10     	; 0x90e <display+0x370>
			PORTB = 0b11111111;
 904:	8f ef       	ldi	r24, 0xFF	; 255
 906:	85 b9       	out	0x05, r24	; 5
			PORTC = 0b11111111;
 908:	88 b9       	out	0x08, r24	; 8
			PORTD = 0b00000000;
 90a:	1b b8       	out	0x0b, r1	; 11
 90c:	04 c0       	rjmp	.+8      	; 0x916 <display+0x378>
			}
			else {
				PORTB = 0b11111111;
 90e:	8f ef       	ldi	r24, 0xFF	; 255
 910:	85 b9       	out	0x05, r24	; 5
				PORTD = 0b11111111;
 912:	8b b9       	out	0x0b, r24	; 11
				PORTC = 0b00000000;
 914:	18 b8       	out	0x08, r1	; 8
			}
			load++;
 916:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <load>
 91a:	9f 5f       	subi	r25, 0xFF	; 255
 91c:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <load>
			game = wait;
 920:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <game>
			stick = noStick;
 924:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <stick>
			if (load % 5 == 0) {
 928:	8d ec       	ldi	r24, 0xCD	; 205
 92a:	98 9f       	mul	r25, r24
 92c:	81 2d       	mov	r24, r1
 92e:	11 24       	eor	r1, r1
 930:	86 95       	lsr	r24
 932:	86 95       	lsr	r24
 934:	28 2f       	mov	r18, r24
 936:	22 0f       	add	r18, r18
 938:	22 0f       	add	r18, r18
 93a:	82 0f       	add	r24, r18
 93c:	98 13       	cpse	r25, r24
 93e:	05 c0       	rjmp	.+10     	; 0x94a <display+0x3ac>
				++rock;
 940:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <rock>
 944:	8f 5f       	subi	r24, 0xFF	; 255
 946:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <rock>
			}
			if (rock > 100) {
 94a:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <rock>
 94e:	85 36       	cpi	r24, 0x65	; 101
 950:	08 f4       	brcc	.+2      	; 0x954 <display+0x3b6>
 952:	44 c0       	rjmp	.+136    	; 0x9dc <display+0x43e>
				rock = 0;
 954:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <rock>
				load = 0;
 958:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <load>
				if ((~PINA & 0x08) == 0x08){
 95c:	03 99       	sbic	0x00, 3	; 0
 95e:	3e c0       	rjmp	.+124    	; 0x9dc <display+0x43e>
					stick = readStick;
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <stick>
 966:	27 eb       	ldi	r18, 0xB7	; 183
 968:	31 e0       	ldi	r19, 0x01	; 1
 96a:	47 e4       	ldi	r20, 0x47	; 71
 96c:	51 e0       	ldi	r21, 0x01	; 1
 96e:	0a c0       	rjmp	.+20     	; 0x984 <display+0x3e6>
					for (unsigned int q = 7; q >= 1; --q){
						for (unsigned int j = 0; j <=7; ++j){
							board[q][j] = 0;
 970:	11 92       	st	Z+, r1
 972:	11 92       	st	Z+, r1
				rock = 0;
				load = 0;
				if ((~PINA & 0x08) == 0x08){
					stick = readStick;
					for (unsigned int q = 7; q >= 1; --q){
						for (unsigned int j = 0; j <=7; ++j){
 974:	e8 17       	cp	r30, r24
 976:	f9 07       	cpc	r31, r25
 978:	d9 f7       	brne	.-10     	; 0x970 <display+0x3d2>
 97a:	20 51       	subi	r18, 0x10	; 16
 97c:	31 09       	sbc	r19, r1
			if (rock > 100) {
				rock = 0;
				load = 0;
				if ((~PINA & 0x08) == 0x08){
					stick = readStick;
					for (unsigned int q = 7; q >= 1; --q){
 97e:	24 17       	cp	r18, r20
 980:	35 07       	cpc	r19, r21
 982:	21 f0       	breq	.+8      	; 0x98c <display+0x3ee>
 984:	c9 01       	movw	r24, r18
 986:	40 96       	adiw	r24, 0x10	; 16
			renderBoardC[1] = 0b11111111;
			renderBoardC[2] = 0b11111111;
			renderBoardC[3] = 0b11111111;
			renderBoardC[4] = 0b11111111;
			renderBoardC[5] = 0b11111111;
			renderBoardC[6] = 0b11111111;
 988:	f9 01       	movw	r30, r18
 98a:	f2 cf       	rjmp	.-28     	; 0x970 <display+0x3d2>
					for (unsigned int q = 7; q >= 1; --q){
						for (unsigned int j = 0; j <=7; ++j){
							board[q][j] = 0;
						}
					}
					board[0][choice] = 0;
 98c:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <choice>
 990:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <choice+0x1>
 994:	ee 0f       	add	r30, r30
 996:	ff 1f       	adc	r31, r31
 998:	e9 5b       	subi	r30, 0xB9	; 185
 99a:	fe 4f       	sbci	r31, 0xFE	; 254
 99c:	11 82       	std	Z+1, r1	; 0x01
 99e:	10 82       	st	Z, r1
					curPick = 0;
 9a0:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <curPick+0x1>
 9a4:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <curPick>
					choice = 0;
 9a8:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <choice+0x1>
 9ac:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <choice>
					board[0][0] = 1;
 9b0:	81 e0       	ldi	r24, 0x01	; 1
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <board+0x1>
 9b8:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <board>
					player = 'g';
 9bc:	27 e6       	ldi	r18, 0x67	; 103
 9be:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <player>
					winCheck = 1;
 9c2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <winCheck+0x1>
 9c6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <winCheck>
					haveWon = 0;
 9ca:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <haveWon+0x1>
 9ce:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <haveWon>
					screen = init1;
 9d2:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <screen>
					break;
 9d6:	02 c0       	rjmp	.+4      	; 0x9dc <display+0x43e>
			}
			break;
		}
		default:
		{
			screen = init1;
 9d8:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <screen>
			//PORTB = 0x02;
			break;
		}
		
	}
}
 9dc:	df 91       	pop	r29
 9de:	cf 91       	pop	r28
 9e0:	1f 91       	pop	r17
 9e2:	0f 91       	pop	r16
 9e4:	ff 90       	pop	r15
 9e6:	ef 90       	pop	r14
 9e8:	df 90       	pop	r13
 9ea:	cf 90       	pop	r12
 9ec:	bf 90       	pop	r11
 9ee:	af 90       	pop	r10
 9f0:	9f 90       	pop	r9
 9f2:	8f 90       	pop	r8
 9f4:	08 95       	ret

000009f6 <main>:


int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 9f6:	11 b8       	out	0x01, r1	; 1
 9f8:	8f ef       	ldi	r24, 0xFF	; 255
 9fa:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 9fc:	84 b9       	out	0x04, r24	; 4
 9fe:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
 a00:	8a b9       	out	0x0a, r24	; 10
 a02:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xFF; PORTC = 0x00;
 a04:	87 b9       	out	0x07, r24	; 7
 a06:	18 b8       	out	0x08, r1	; 8
	TimerSet(1);
 a08:	61 e0       	ldi	r22, 0x01	; 1
 a0a:	70 e0       	ldi	r23, 0x00	; 0
 a0c:	80 e0       	ldi	r24, 0x00	; 0
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	cc db       	rcall	.-2152   	; 0x1aa <TimerSet>
	TimerOn();
 a12:	6b db       	rcall	.-2346   	; 0xea <TimerOn>
 a14:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <screen>
	screen = init1;
 a18:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <game>
	game = wait;
 a1c:	81 e0       	ldi	r24, 0x01	; 1
	stick = readStick;
 a1e:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <stick>
	ADC_init();
 a22:	5d db       	rcall	.-2374   	; 0xde <ADC_init>
 a24:	80 b1       	in	r24, 0x00	; 0
	
	my_short = PINA;
 a26:	28 2f       	mov	r18, r24
 a28:	30 e0       	ldi	r19, 0x00	; 0
 a2a:	30 93 40 01 	sts	0x0140, r19	; 0x800140 <my_short+0x1>
 a2e:	20 93 3f 01 	sts	0x013F, r18	; 0x80013f <my_short>
 a32:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <my_char>
	my_char = (char)my_short; // my_char = 0xCD
 a36:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <my_sol>
	my_sol = (char)my_short;
 a3a:	81 e0       	ldi	r24, 0x01	; 1
	int joytest = 0;
	board[0][0] = 1;
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <board+0x1>
 a42:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <board>
    while (1) 
    {
		joystick();
 a46:	c2 db       	rcall	.-2172   	; 0x1cc <joystick>
		play();
 a48:	7a dc       	rcall	.-1804   	; 0x33e <play>
 a4a:	a9 dd       	rcall	.-1198   	; 0x59e <display>
		display();
 a4c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <TimerFlag>
		//++load;
		while (!TimerFlag);
 a50:	88 23       	and	r24, r24
 a52:	e1 f3       	breq	.-8      	; 0xa4c <main+0x56>
 a54:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <TimerFlag>
		TimerFlag = 0;
 a58:	f6 cf       	rjmp	.-20     	; 0xa46 <main+0x50>

00000a5a <__tablejump2__>:
 a5a:	ee 0f       	add	r30, r30
    }
 a5c:	ff 1f       	adc	r31, r31
 a5e:	00 24       	eor	r0, r0
 a60:	00 1c       	adc	r0, r0
 a62:	0b be       	out	0x3b, r0	; 59
 a64:	07 90       	elpm	r0, Z+
 a66:	f6 91       	elpm	r31, Z
 a68:	e0 2d       	mov	r30, r0
 a6a:	09 94       	ijmp

00000a6c <__umulhisi3>:
 a6c:	a2 9f       	mul	r26, r18
 a6e:	b0 01       	movw	r22, r0
 a70:	b3 9f       	mul	r27, r19
 a72:	c0 01       	movw	r24, r0
 a74:	a3 9f       	mul	r26, r19
 a76:	70 0d       	add	r23, r0
 a78:	81 1d       	adc	r24, r1
 a7a:	11 24       	eor	r1, r1
 a7c:	91 1d       	adc	r25, r1
 a7e:	b2 9f       	mul	r27, r18
 a80:	70 0d       	add	r23, r0
 a82:	81 1d       	adc	r24, r1
 a84:	11 24       	eor	r1, r1
 a86:	91 1d       	adc	r25, r1
 a88:	08 95       	ret

00000a8a <_exit>:
 a8a:	f8 94       	cli

00000a8c <__stop_program>:
 a8c:	ff cf       	rjmp	.-2      	; 0xa8c <__stop_program>
