
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000031e  000003b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800116  00800116  000003c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d0a  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000958  00000000  00000000  000011e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055e  00000000  00000000  00001b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00002098  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f7  00000000  00000000  000021d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000320  00000000  00000000  000026cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000029eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c5 c0       	rjmp	.+394    	; 0x1c0 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e1       	ldi	r30, 0x1E	; 30
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 31       	cpi	r26, 0x1B	; 27
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d1 d0       	rcall	.+418    	; 0x266 <main>
  c4:	2a c1       	rjmp	.+596    	; 0x31a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
  ee:	5e 98       	cbi	0x0b, 6	; 11
   DATA_BUS = Command;
  f0:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
  f2:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
  f4:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
  f6:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
	LCD_WriteCommand(0x38);
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
	delay_ms(10);						 
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
   DATA_BUS = Data;
 136:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 138:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
 13a:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 13c:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(1);
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
      LCD_Cursor(c++);
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
      LCD_WriteData(*string++);
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 168:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <TimerOn>:
 178:	8b e0       	ldi	r24, 0x0B	; 11
void TimerOff() {
	TCCR1B = 0x00;
}

void TimerISR() {
	TimerFlag = 1;
 17a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 17e:	8d e7       	ldi	r24, 0x7D	; 125
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 186:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 190:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 194:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 19c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1a4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1a8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 1ac:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 1b0:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <__data_end+0x2>
 1b4:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <__data_end+0x3>
 1b8:	8f b7       	in	r24, 0x3f	; 63
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	8f bf       	out	0x3f, r24	; 63
 1be:	08 95       	ret

000001c0 <__vector_13>:
}

ISR(TIMER1_COMPA_vect) {
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 1d2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 1d6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 1da:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <__data_end+0x2>
 1de:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <__data_end+0x3>
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	a1 09       	sbc	r26, r1
 1e6:	b1 09       	sbc	r27, r1
 1e8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 1ec:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 1f0:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <__data_end+0x2>
 1f4:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) {
 1f8:	89 2b       	or	r24, r25
 1fa:	8a 2b       	or	r24, r26
 1fc:	8b 2b       	or	r24, r27
 1fe:	99 f4       	brne	.+38     	; 0x226 <__vector_13+0x66>
void TimerOff() {
	TCCR1B = 0x00;
}

void TimerISR() {
	TimerFlag = 1;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <TimerFlag>

ISR(TIMER1_COMPA_vect) {
	_avr_timer_cntcurr--;
	if (_avr_timer_cntcurr == 0) {
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 206:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 20a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 20e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 212:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 216:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 21a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 21e:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <__data_end+0x2>
 222:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <__data_end+0x3>
	}
}
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <TimerSet>:

void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 238:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 23c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 240:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 244:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 248:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <__data_end>
 24c:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <__data_end+0x1>
 250:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end+0x2>
 254:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x3>
 258:	08 95       	ret

0000025a <ADC_init>:
}

void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 25a:	ea e7       	ldi	r30, 0x7A	; 122
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	80 6e       	ori	r24, 0xE0	; 224
 262:	80 83       	st	Z, r24
 264:	08 95       	ret

00000266 <main>:
	// Since we are in Free Running mode, a new conversion will trigger whenever the previous conversion completes
}

int main(void) {
    /* Insert DDR and PORT initializations */
	DDRA = 0x00; PORTA = 0xFF;   // input
 266:	11 b8       	out	0x01, r1	; 1
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;  // output
 26c:	87 b9       	out	0x07, r24	; 7
 26e:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; // output
 270:	8a b9       	out	0x0a, r24	; 10
 272:	1b b8       	out	0x0b, r1	; 11
	TimerOn();
 274:	81 df       	rcall	.-254    	; 0x178 <TimerOn>
	TimerSet(500);
 276:	64 ef       	ldi	r22, 0xF4	; 244
 278:	71 e0       	ldi	r23, 0x01	; 1
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
	ADC_init();
 27e:	dc df       	rcall	.-72     	; 0x238 <TimerSet>
	
	unsigned short my_short = PINA;
 280:	ec df       	rcall	.-40     	; 0x25a <ADC_init>
	unsigned char my_char = (char)my_short; // my_char = 0xCD
	unsigned char my_sol = (char)my_short;
	uint16_t rock;
	int test = 0;

	LCD_init();
 282:	d0 b0       	in	r13, 0x00	; 0
 284:	48 df       	rcall	.-368    	; 0x116 <LCD_init>
	
	unsigned short my_short = PINA;
	unsigned char my_char = (char)my_short; // my_char = 0xCD
	unsigned char my_sol = (char)my_short;
	uint16_t rock;
	int test = 0;
 286:	00 e0       	ldi	r16, 0x00	; 0
 288:	10 e0       	ldi	r17, 0x00	; 0

	LCD_init();
	
    while (1) {
		rock = ADC;
 28a:	0f 2e       	mov	r0, r31
 28c:	f8 e7       	ldi	r31, 0x78	; 120
 28e:	ef 2e       	mov	r14, r31
 290:	f1 2c       	mov	r15, r1
 292:	f0 2d       	mov	r31, r0
		min_light = my_short;
	}*/
		my_char = (char)(my_short); // my_char = 0xAB
		if (test == 0) {
			my_sol = my_char;
			test++;
 294:	bb 24       	eor	r11, r11
 296:	b3 94       	inc	r11
 298:	c1 2c       	mov	r12, r1
	int test = 0;

	LCD_init();
	
    while (1) {
		rock = ADC;
 29a:	f7 01       	movw	r30, r14
 29c:	c0 81       	ld	r28, Z
 29e:	d1 81       	ldd	r29, Z+1	; 0x01
	} 
	if (my_short < min_light) {
		min_light = my_short;
	}*/
		my_char = (char)(my_short); // my_char = 0xAB
		if (test == 0) {
 2a0:	01 15       	cp	r16, r1
 2a2:	11 05       	cpc	r17, r1
 2a4:	19 f0       	breq	.+6      	; 0x2ac <main+0x46>
			my_sol = my_char;
			test++;
		}
		if (my_char == my_sol) {
 2a6:	dc 12       	cpse	r13, r28
 2a8:	09 c0       	rjmp	.+18     	; 0x2bc <main+0x56>
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <main+0x4a>
		min_light = my_short;
	}*/
		my_char = (char)(my_short); // my_char = 0xAB
		if (test == 0) {
			my_sol = my_char;
			test++;
 2ac:	0b 2d       	mov	r16, r11
		}
		if (my_char == my_sol) {
			LCD_DisplayString(1, "Center");
 2ae:	1c 2d       	mov	r17, r12
 2b0:	64 e0       	ldi	r22, 0x04	; 4
 2b2:	71 e0       	ldi	r23, 0x01	; 1
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	47 df       	rcall	.-370    	; 0x146 <LCD_DisplayString>
 2b8:	dc 2e       	mov	r13, r28
 2ba:	28 c0       	rjmp	.+80     	; 0x30c <main+0xa6>
		}
		else if ((my_char > (my_sol + 20)) &&  (my_char < (my_sol + 50) )){LCD_DisplayString(1, "Left");}
 2bc:	ce 01       	movw	r24, r28
 2be:	99 27       	eor	r25, r25
 2c0:	2d 2d       	mov	r18, r13
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	a9 01       	movw	r20, r18
 2c6:	4c 5e       	subi	r20, 0xEC	; 236
 2c8:	5f 4f       	sbci	r21, 0xFF	; 255
 2ca:	48 17       	cp	r20, r24
 2cc:	59 07       	cpc	r21, r25
 2ce:	54 f4       	brge	.+20     	; 0x2e4 <main+0x7e>
 2d0:	42 5e       	subi	r20, 0xE2	; 226
 2d2:	5f 4f       	sbci	r21, 0xFF	; 255
 2d4:	84 17       	cp	r24, r20
 2d6:	95 07       	cpc	r25, r21
 2d8:	2c f4       	brge	.+10     	; 0x2e4 <main+0x7e>
 2da:	6b e0       	ldi	r22, 0x0B	; 11
 2dc:	71 e0       	ldi	r23, 0x01	; 1
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	32 df       	rcall	.-412    	; 0x146 <LCD_DisplayString>
 2e2:	14 c0       	rjmp	.+40     	; 0x30c <main+0xa6>
		else if ((my_char > (my_sol + 190)) &&  (my_char < (my_sol + 200) )){LCD_DisplayString(1, "Right");}
 2e4:	a9 01       	movw	r20, r18
 2e6:	42 54       	subi	r20, 0x42	; 66
 2e8:	5f 4f       	sbci	r21, 0xFF	; 255
 2ea:	48 17       	cp	r20, r24
 2ec:	59 07       	cpc	r21, r25
 2ee:	54 f4       	brge	.+20     	; 0x304 <main+0x9e>
 2f0:	28 53       	subi	r18, 0x38	; 56
 2f2:	3f 4f       	sbci	r19, 0xFF	; 255
 2f4:	82 17       	cp	r24, r18
 2f6:	93 07       	cpc	r25, r19
 2f8:	2c f4       	brge	.+10     	; 0x304 <main+0x9e>
 2fa:	60 e1       	ldi	r22, 0x10	; 16
 2fc:	71 e0       	ldi	r23, 0x01	; 1
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	22 df       	rcall	.-444    	; 0x146 <LCD_DisplayString>
		else {LCD_DisplayString(1, "Center");}
 302:	04 c0       	rjmp	.+8      	; 0x30c <main+0xa6>
 304:	64 e0       	ldi	r22, 0x04	; 4
 306:	71 e0       	ldi	r23, 0x01	; 1
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	1d df       	rcall	.-454    	; 0x146 <LCD_DisplayString>
		//LCD_DisplayString(1, my_char);
		while (!TimerFlag);
 30c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <TimerFlag>
 310:	88 23       	and	r24, r24
 312:	e1 f3       	breq	.-8      	; 0x30c <main+0xa6>
		TimerFlag = 0;
 314:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <TimerFlag>

    }
 318:	c0 cf       	rjmp	.-128    	; 0x29a <main+0x34>

0000031a <_exit>:
 31a:	f8 94       	cli

0000031c <__stop_program>:
 31c:	ff cf       	rjmp	.-2      	; 0x31c <__stop_program>
